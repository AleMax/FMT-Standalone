package net.fexcraft.app.fmt.utils;

import java.util.Map;
import java.util.TreeMap;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import net.fexcraft.app.fmt.FMTB;
import net.fexcraft.lib.common.json.JsonUtil;
import net.fexcraft.lib.common.math.Time;

public class StyleSheet {
	
	public static final int BLACK = 0xff000000, WHITE = 0xffffffff;
	
	public static final TreeMap<String, TreeMap<String, ColorInt>> COLOURS = new TreeMap<>();
	private static String author;
	
	public static final Integer getColourFor(String group, String entry){
		return getColourFor(group, entry, 0xffcfcfcf, true);
	}

	public static final Integer getColourFor(String group, String entry, String def){
		return getColourFor(group, entry, Integer.parseInt(def.replace("#", ""), 16), true);
	}
	public static final Integer getColourFor(String group, String entry, int def){
		return getColourFor(group, entry, def, true);
	}
	
	public static final Integer getColourFor(String group, String entry, int def, boolean override){
		if(!COLOURS.containsKey(group)) COLOURS.put(group, new TreeMap<>());
		if(!COLOURS.get(group).containsKey(entry)) COLOURS.get(group).put(entry, new ColorInt(false, def));
		else if(override && !COLOURS.get(group).get(entry).loaded) COLOURS.get(group).get(entry).value = def;
		return COLOURS.get(group).get(entry).value;
	}

	public static void load(){
		JsonObject object = JsonUtil.get(new java.io.File("./stylesheet.json"));
		if(!object.has("groups")) return; JsonObject obj;
		author = JsonUtil.getIfExists(object, "author", "Generated by FMT");
		JsonObject groups = object.get("groups").getAsJsonObject();
		for(Map.Entry<String, JsonElement> elm : groups.entrySet()){
			obj = elm.getValue().getAsJsonObject();
			if(obj.entrySet().size() > 0) COLOURS.put(elm.getKey(), new TreeMap<>()); else continue;
			for(Map.Entry<String, JsonElement> entry : obj.entrySet()){
				if(!entry.getValue().isJsonPrimitive()) continue;
				long l = Long.parseLong(entry.getValue().getAsString().replace("#", ""), 16);
				COLOURS.get(elm.getKey()).put(entry.getKey(), new ColorInt(true, (int)l));
			}
		}
	}

	public static void save(){
		JsonObject object = new JsonObject(), obj = null;
		object.addProperty("comment", "ARGB Hex Strings - for UI Elements.");
		object.addProperty("author", author == null ? "Generated by FMT" : author);
		JsonObject groups = new JsonObject();
		for(Map.Entry<String, TreeMap<String, ColorInt>> map : COLOURS.entrySet()){
			if(map.getValue().isEmpty()) continue; obj = new JsonObject();
			for(Map.Entry<String, ColorInt> entry : map.getValue().entrySet()){
				obj.addProperty(entry.getKey(), "#" + Integer.toHexString(entry.getValue().value));
			}
			groups.add(map.getKey(), obj);
		}
		object.add("groups", groups);
		object.addProperty("last_fmt_version_used", FMTB.version);
		object.addProperty("last_fmt_exit", Time.getAsString(Time.getDate()));
		JsonUtil.write(new java.io.File("./stylesheet.json"), object);
	}
	
	public static class ColorInt {
		
		private boolean loaded; private int value;
		
		public ColorInt(boolean loaded, int value){
			this.loaded = loaded; this.value = value;
		}
		
		@Override
		public String toString(){
			return (loaded ? 1 : 0) + "#" + Integer.toHexString(value);
		}
		
	}

}
